'''
给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。

输入：k = 2, prices = [3,2,6,5,0,3]
输出：7
解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。

思路：k次交易  每次的买入的最大利润只可能从两个状态转换而来：上次的买入、上次卖出后买入
             每次的卖出的最大利润只可能从两个状态转换而来：上次的卖出、上次买入后卖出
'''
class Solution:
    def maxProfit(self, k, prices):
        # 首先k大小如果超过了prices数组的长度的一半是无效的 因为买入卖出至少平衡
        k = min(k, len(prices) // 2)
        # 0-k的状态
        buy = [-float("inf")] * (k+1)
        sell = [0] * (k+1)
        for p in prices:
            # k*2个状态
            for i in range(1, k+1):
                buy[i] = max(buy[i], sell[i-1] - p)
                sell[i] = max(sell[i], buy[i-1] + p)
        return sell[-1]