'''
假定你知道某只股票每一天价格的变动。
你最多可以同时持有一只股票。但你最多只能进行两次交易（一次买进和一次卖出记为一次交易。买进和卖出均无手续费）。
请设计一个函数，计算你所能获得的最大收益。

输入：[8,9,3,5,1,3] 输出：4
解释：第三天买进，第四天卖出，第五天买进，第六天卖出。总收益为4。
https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/solution/wu-chong-shi-xian-xiang-xi-tu-jie-123mai-mai-gu-pi/

dp[n][s][k] n表示天数；s表示交易了几次；k:0表示卖出 1表示买入
dp[i][0][0]：表示第i天交易了0次时卖出后的累计最大利润
dp[i][0][1]：表示第i天交易了0次时买入后的累计最大利润
dp[i][1][0]：表示第i天交易了1次时卖出后的累计最大利润
dp[i][1][1]：表示第i天交易了1次时买入后的累计最大利润
dp[i][2][0]：表示第i天交易了2次时卖出后的累计最大利润
dp[i][2][1]：表示第i天交易了2次时买入后的累计最大利润
最后一个dp[i][2][1] 实际是不存在的，因为交易两次后，就不能再买入了
'''
class Solution:
    def maxProfit(self, prices):
        if not prices:
            return 0
        n = len(prices)
        # 定义三维数组，第i天、交易了多少次、当前的买卖状态
        dp = [[[-1 for _ in range(2)] for _ in range(3)] for _ in range(n)]
        # 初始化第一天，这里的dp[0][2][1]可以不用管，后面也不会用到
        # 第一天 交易0次
        dp[0][0][0] = 0
        # 第一天 交易0次 当前买入
        dp[0][0][1] = -prices[0]
        # 第一天 交易1次 当前卖出
        dp[0][1][0] = 0
        # 第一天 交易1次 当前买入
        dp[0][1][1] = -prices[0]
        # 第一天 交易2次 当前卖出
        dp[0][2][0] = 0
        dp[0][2][1] = -prices[0]

        for i in range(1, n):

            dp[i][0][0] = dp[i-1][0][0]
            # 第一次买入 买入1这个状态只能从两个地方转换来，买入1本身(保持不动)，或者是初始状态转换而来。
            dp[i][0][1] = max(dp[i-1][0][1], dp[i-1][0][0]-prices[i])
            # 第一次卖出 卖出1这个状态，也只能从两个地方转换而来，卖出1本身(保持不动)，或者从买入1转来
            dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][0][1]+prices[i])
            # 第二次买入 第二次买入只能从 第一次卖出转换来，或者保持不动
            dp[i][1][1] = max(dp[i-1][1][1], dp[i-1][1][0]-prices[i])
            # 第二次卖出 第二次卖出只能从第二次买入转换来，或者保持不动
            dp[i][2][0] = max(dp[i-1][2][0], dp[i-1][1][1]+prices[i])
        # 返回最后一天的5个状态对应的利润最大值
        return max(dp[-1][0][0],dp[-1][0][1],dp[-1][1][0],dp[-1][1][1],dp[-1][2][0])

    
    def maxProfit(self, prices):
        # 只允许最多买两次，那么就有四个状态，第一次买，第一次卖，第二次买，第二次卖
        b1, b2, s1, s2 = -float("inf"), -float("inf"), 0, 0
        for p in prices:
            b1 = max(b1, 0 - p)
            s1 = max(s1, b1 + p)
            b2 = max(b2, s1 - p)
            s2 = max(s2, b2 + p)   
        return s2
