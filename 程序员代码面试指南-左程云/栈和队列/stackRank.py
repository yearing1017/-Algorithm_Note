'''
给你一个 1 到 n 的排列和一个栈，入栈顺序给定
你要在不打乱入栈顺序的情况下，仅利用入栈和出栈两种操作，对数组进行从大到小排序，输出排序结果
当无法完全排序时，请输出字典序最大的出栈序列

例如：
输入：
    [2,1,5,3,4]
返回值：
    [5,4,3,1,2]
说明：
    操作       栈     结果
    2 入栈；[2]       []
    1 入栈；[2\1]     []
    5 入栈；[2\1\5]   []
    5 出栈；[2\1]     [5]
    3 入栈；[2\1\3]   [5]
    4 入栈；[2\1\3\4] [5]
    4 出栈；[2\1\3]   [5,4]
    3 出栈；[2\1]     [5,4,3]
    1 出栈；[2]       [5,4,3,1]
    2 出栈；[]        [5,4,3,1,2] 
'''
class Solution:
    def solve(self, a):
        s = []
        n = len(a)
        res = []
        # 标记哪个数字出现过
        vis = [0] * (n+1)
        for i in a:
            # 模拟压入栈
            s.append(i)
            vis[i] = 1
            # 检测栈中 有多少个数出现了 即较大的哪些数出现了
            while n and vis[n]:
                n -= 1
            while s and s[-1] >= n:
                # 将栈中 >=n 的元素出栈
                res.append(s.pop())
        # 栈没空就按照原样直接出栈
        while s:
            res.append(s.pop())
        return res
            

